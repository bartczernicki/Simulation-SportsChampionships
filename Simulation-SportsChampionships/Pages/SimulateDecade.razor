@page "/SimulateDecade"
@inject IJSRuntime JSRuntime

<label>Choose a sport decade to simulate:</label>
<select @onchange="@SelectedDecadeChanged">
  <option value="NBA1960s">NBA: 1959 - 1969 (10 Years)</option>
  <option value="NBA2010s">NBA: 2011 - 2021 (10 Years)</option>
  <option value="NFL2010s">NFL: 2011 - 2021 (10 Years)</option>
</select>
<br />

<input id="numberOfSimulationsInput" type="range" class="" min="100" max="10000" step="200"
        value="@this.NumberOfSimulations" @onchange="@OnNumberOfSimulationsUpdated" oninput="numberOfSimulationsOutput.value=numberOfSimulationsInput.value" />
<output name="numberOfSimulationsOutput" id="numberOfSimulationsOutput" for="numberOfSimulationsInput">@this.NumberOfSimulations</output>

<button class="btn btn-primary px-2 p-1 mt-2 mb-2" @onclick="SimulateSportsDecade">Re-Simulate Decade</button>

<div class="card" style="min-height: 0px;">
    <div class="containerHeader">
        <div class="fixedHeader">
            <button class="showMeButton" @onclick="ChangeButtonAppearancePlayoffAppearances">
                @buttonPlayoffAppearances
            </button>
        </div>
        <span class="verticalHeader">Playoff Appearances</span>
    </div>
    <div class="@cardDetailsStylePlayoffAppearances">
        <div class="g-predictionChart">
            <h5>Predictions - Playoff Appearances</h5>
            <!-- Create a div where the graph will take place -->
            <div id="dataVizPlayoffs" style="clear: both;">
            </div>
        </div>
        <div class="g-predictionTable">
            <table>
                <thead>
                    <tr>
                        <th class="g-prediction-header">Count of Playoff Appearances</th>
                        <th>Probability - Playoff Appearances</th>
                        <th>Probability - At Least Amount of Playoff Appearances</th>
                    </tr>
                </thead>
                @foreach (var numberOfEvents in Enumerable.Range(0, 11))
                {
                    <tr class="g-prediction-row">
                        <td class="g-seasonNumber">@numberOfEvents</td>
                        <td>@FormatProbability(Decimal.Divide(this.playoffsCount.Where(a => a == numberOfEvents).Count(), NumberOfSimulations))</td>
                        <td>@FormatProbability(Decimal.Divide(this.playoffsCount.Where(a => a >= numberOfEvents).Count(), NumberOfSimulations))</td>
                    </tr>
                }
            </table>
        </div>
    </div>
</div>
<br />
<div class="card" style="min-height: 0px;">
    <div class="containerHeader">
        <div class="fixedHeader">
            <button class="showMeButton" @onclick="ChangeButtonAppearanceChampionships">
                @buttonChampionships
            </button>
        </div>
        <span class="verticalHeader">Championships Won</span>
    </div>
    <div class="@cardDetailsStyleChampionships">
        <div class="g-predictionChart">
            <h5>Predictions - Championships Won</h5>
            <!-- Create a div where the graph will take place -->
            <div id="dataVizChampionships" style="clear: both;">
            </div>
        </div>
        <div class="g-predictionTable">
            <table>
                <thead>
                    <tr>
                        <th class="g-prediction-header">Count of Championships Won</th>
                        <th>Probability - Championships Won</th>
                        <th>Probability - At Least Amount of Championships Won</th>
                    </tr>
                </thead>
                @foreach (var numberOfEvents in Enumerable.Range(0, 11))
                {
                    <tr class="g-prediction-row">
                        <td class="g-seasonNumber">@numberOfEvents</td>
                        <td>@FormatProbability(Decimal.Divide(this.championshipsCount.Where(a => a == numberOfEvents).Count(), NumberOfSimulations))</td>
                        <td>@FormatProbability(Decimal.Divide(this.championshipsCount.Where(a => a >= numberOfEvents).Count(), NumberOfSimulations))</td>
                    </tr>
                }
            </table>
        </div>
    </div>
</div>

@code {
    public string SportsDecade { get; set; } = "NBA1960s";
    public int NumberOfSimulations { get; set; } = 1000;

    // Variables
    private string cardDetailsStylePlayoffAppearances = "card-details-visible";
    private string cardDetailsStyleChampionships = "card-details-visible";
    private string buttonPlayoffAppearances = "[ - ]";
    private string buttonChampionships = "[ - ]";



    public bool isPlayoffTeam { get; set; } = false;
    public bool isPlayoffTeamWithBye { get; set; } = false;
    public bool isChampionshipWinningTeam { get; set; } = false;

    List<int> basketballSeasons = new List<int>();

    private List<Simulation.SimulationOutcome> simulationOutComes = new List<Simulation.SimulationOutcome>();
    private List<Simulation.SimulationOutcome> simulatedDecades = new List<Simulation.SimulationOutcome>();

    private List<int> playoffsCount = new List<int>();
    private List<int> championshipsCount = new List<int>();

    protected override void OnParametersSet()
    {
        basketballSeasons = GetDecadeYears(SportsDecade);
        this.SimulateSportsDecade();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await this.RenderCharts();
    }

    private void ChangeButtonAppearancePlayoffAppearances(MouseEventArgs e)
    {
        var eventArgs = e;

        cardDetailsStylePlayoffAppearances = (cardDetailsStylePlayoffAppearances == "card-details-hidden") ? ("card-details-visible") : ("card-details-hidden");
        buttonPlayoffAppearances = (buttonPlayoffAppearances == "[ - ]") ? ("[ + ]") : ("[ - ]");
    }

    private void ChangeButtonAppearanceChampionships(MouseEventArgs e)
    {
        var eventArgs = e;

        cardDetailsStyleChampionships = (cardDetailsStyleChampionships == "card-details-hidden") ? ("card-details-visible") : ("card-details-hidden");
        buttonChampionships = (buttonChampionships == "[ - ]") ? ("[ + ]") : ("[ - ]");
    }

    private void OnNumberOfSimulationsUpdated(ChangeEventArgs e)
    {
        if (int.TryParse((string)e.Value, out var index) && index >= 0)
        {
            this.NumberOfSimulations = index;
            this.SimulateSportsDecade();
        }
    }

    void SelectedDecadeChanged(ChangeEventArgs e)
    {
        SportsDecade = e.Value.ToString();
        basketballSeasons = GetDecadeYears(SportsDecade);
        SimulateSportsDecade();

        Console.WriteLine("Selected Sports Decade: " + SportsDecade);

        StateHasChanged();
    }

    protected static List<int> GetDecadeYears(string sportDecade)
    {
        List<int> seasonYears = new List<int>();

        switch (sportDecade)
        {
            case "NBA1960s":
                seasonYears = Enumerable.Range(1959, 10).ToList();
                break;
            case "NBA2010s":
                seasonYears = Enumerable.Range(2011, 10).ToList();
                break;
            case "NFL2010s":
                seasonYears = Enumerable.Range(2011, 10).ToList();
                break;
        };

        return seasonYears;
    }

    private void SimulateBasketBallSeason()
    {
        Console.WriteLine("Simulate Basketball Season");
        var basketBallSimulationOutCome = Simulation.SportsLeagueSeasonSimulation.GetSportsLeagueSimulationOutcome("football", 2020);
        this.isPlayoffTeam = basketBallSimulationOutCome.IsPlayoffTeam;
        this.isPlayoffTeamWithBye = basketBallSimulationOutCome.IsPlayoffTeamWithBye;
        this.isChampionshipWinningTeam = basketBallSimulationOutCome.IsChampionshipWinningTeam;

        simulationOutComes.Add(basketBallSimulationOutCome);
    }

    private void SimulateSportsDecade()
    {
        this.simulatedDecades = new List<Simulation.SimulationOutcome>();
        this.playoffsCount = new List<int>();
        this.championshipsCount = new List<int>();
        string sportsLeague = this.GetSportsLeague(SportsDecade);

        Console.WriteLine("SimulateSportsDecade - " + sportsLeague);

        for (int i = 0; i != NumberOfSimulations; i++)
        {
            var simulatedDecade = 
                basketballSeasons.Select(year => Simulation.SportsLeagueSeasonSimulation.GetSportsLeagueSimulationOutcome(sportsLeague, year)).ToList();
            simulatedDecades.AddRange(simulatedDecade);

            // Count playoffs and championships for each simulation
            var playOffCount = simulatedDecade.Where(a => a.IsPlayoffTeam).Count();
            this.playoffsCount.Add(playOffCount);

            var championshipCount = simulatedDecade.Where(a => a.IsChampionshipWinningTeam).Count();
            this.championshipsCount.Add(championshipCount);
        }
    }

    protected string GetSportsLeague(string selectedSportsDecade)
    {
        var sportsLeague = "basketball";

        if (selectedSportsDecade == "NFL2010s")
        {
            sportsLeague = "football";
        }

        return sportsLeague;
    }

    protected string GetSportsLeagueDecadeLegend(string selectedSportsDecade)
    {
        var playerName = string.Empty;

        switch (selectedSportsDecade)
        {
            case "NBA1960s":
                playerName = "Bill Russell";
                break;
            case "NBA2010s":
                playerName = "Lebron James";
                break;
            case "NFL2010s":
                playerName = "Tom Brady";
                break;
        }


        return playerName;
    }

    protected string FormatProbability(decimal probability)
    {
        var fomattedProbability = Math.Round(probability, 10, MidpointRounding.AwayFromZero);
        return string.Format("{0:P4}", fomattedProbability);
    }

    private async Task RenderCharts()
    {
        var playoffsCountMean = Math.Round(this.playoffsCount.Average(), 2, MidpointRounding.AwayFromZero);
        var championshipsCountMean = Math.Round(this.championshipsCount.Average(), 2, MidpointRounding.AwayFromZero);

        await JSRuntime.InvokeVoidAsync("createD3SvgObject", this.playoffsCount, playoffsCountMean, "dataVizPlayoffs", "Playoff Appearances");
        await JSRuntime.InvokeVoidAsync("createD3SvgObject", this.championshipsCount, championshipsCountMean, "dataVizChampionships", "Championships Won");
    }
}
