@page "/counter"

<p>Current Simulation Outcome: @isPlayoffTeam</p>
<p>Is PlayOff Team: @isPlayoffTeam</p>
<p>Is PlayOff Team With Bye: @isPlayoffTeamWithBye</p>
<p>Is ChampionShip Team: @isChampionshipWinningTeam</p>


<p>Total Simulations: @simulationOutComes.Count</p>
<p>Playoff Teams: @simulationOutComes.Where(a => a.IsPlayoffTeam).Count() </p>
<p>Playoff Teams with Bye: @simulationOutComes.Where(a => a.IsPlayoffTeamWithBye).Count() </p>
<p>ChampionShip Teams: @simulationOutComes.Where(a => a.IsChampionshipWinningTeam).Count()</p>

<table class="table">
    <thead>
        <tr>
            <th>Year</th>
            <th>Is PlayOff Team</th>
            <th>Is Playoff Team With Bye</th>
            <th>Is Championship Team</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var seasonYear in basketballSeasons)
        {
        <tr>
            <td>@seasonYear</td>
            <td>@( (double) simulatedDecades.Where(a => a.SeasonStartYear == seasonYear && a.IsPlayoffTeam).Count()/ numberOfSimulations)</td>
            <td>@( (double) simulatedDecades.Where(a => a.SeasonStartYear == seasonYear && a.IsPlayoffTeamWithBye).Count()/ numberOfSimulations)</td>
            <td>@( (double) simulatedDecades.Where(a => a.SeasonStartYear == seasonYear && a.IsChampionshipWinningTeam).Count()/numberOfSimulations)</td>
        </tr>
        }
    </tbody>
</table>

<button class="btn btn-primary" @onclick="SimulateBasketBallSeason">Click me</button>
<button class="btn btn-primary" @onclick="SimulateDecade">Simulate decade (1000 times)</button>

@code {

    private int numberOfSimulations = 1000;

    public bool isPlayoffTeam { get; set; } = false;
    public bool isPlayoffTeamWithBye { get; set; } = false;
    public bool isChampionshipWinningTeam { get; set; } = false;

    List<int> basketballSeasons =
        Enumerable.Range(1959, 10).Concat(Enumerable.Range(2009, 10)).ToList();
    private List<Simulation.SimulationOutcome> simulationOutComes = new List<Simulation.SimulationOutcome>();
    private List<Simulation.SimulationOutcome> simulatedDecades = new List<Simulation.SimulationOutcome>();


    private void SimulateBasketBallSeason()
    {
        Console.WriteLine("Simulate Basketball Season");
        var basketBallSimulationOutCome = Simulation.BaketBallSeasonSimulation.GetBaskeBallSeasonSimulationOutcome(1960);
        this.isPlayoffTeam = basketBallSimulationOutCome.IsPlayoffTeam;
        this.isPlayoffTeamWithBye = basketBallSimulationOutCome.IsPlayoffTeamWithBye;
        this.isChampionshipWinningTeam = basketBallSimulationOutCome.IsChampionshipWinningTeam;

        simulationOutComes.Add(basketBallSimulationOutCome);
    }

    private void SimulateDecade()
    {
        this.simulatedDecades = new List<Simulation.SimulationOutcome>();

        for (int i = 0; i != numberOfSimulations; i++)
        {
            var simulatedDecade = basketballSeasons.Select(year => Simulation.BaketBallSeasonSimulation.GetBaskeBallSeasonSimulationOutcome(year)).ToList();
            simulatedDecades.AddRange(simulatedDecade);
        }
    }
}
